// this is rough sketch of some file that should be generated by codegen

pub enum ConstructorError {
    MismatchedDependencies,
}

#[derive(PartialEq, Eq)]
struct Message<Body, Dependencies> {
    pub body: Body,
    pub dependencies: Dependencies,
}

// actual generated part

type Box<T> = std::boxed::Box<T>;

mod nat {
    use super::{Box, ConstructorError, Message};

    #[derive(PartialEq, Eq)]
    pub enum Body {
        Zero,
        Suc(Box<Self>),
    }

    pub type Nat = Body;

    impl Nat {
        pub fn zero() -> Self {
            Nat::Zero
        }

        pub fn suc(pred: Nat) -> Self {
            Nat::Suc(Box::new(pred))
        }
    }
}

use nat::Nat;

mod vec {
    use super::{Box, ConstructorError, Message};

    use super::Nat;

    #[derive(PartialEq, Eq)]
    pub enum Body {
        Nil,
        Cons { val: u64, tail: Box<Self> },
    }

    #[derive(PartialEq, Eq)]
    pub struct Dependencies {
        n: Nat,
    }

    pub type Vec = Message<Body, Dependencies>;

    impl Vec {
        pub fn nil(dependencies: Dependencies) -> Result<Self, ConstructorError> {
            let body = match &dependencies.n {
                Nat::Zero => Ok(Body::Nil),
                _ => Err(ConstructorError::MismatchedDependencies),
            }?;
            Ok(Message { body, dependencies })
        }

        pub fn cons(
            dependencies: Dependencies,
            val: u64,
            tail: Self,
        ) -> Result<Self, ConstructorError> {
            let body = match &dependencies.n {
                Nat::Suc(nat) => {
                    if tail.dependencies.n == **nat {
                        Ok(Body::Cons {
                            val,
                            tail: Box::new(tail.body),
                        })
                    } else {
                        Err(ConstructorError::MismatchedDependencies)
                    }
                }
                _ => Err(ConstructorError::MismatchedDependencies),
            }?;
            Ok(Message { body, dependencies })
        }
    }
}

use vec::Vec;
